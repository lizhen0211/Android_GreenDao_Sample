package com.example.lz.android_greendao_sample;

import org.greenrobot.greendao.annotation.*;

import com.example.lz.android_greendao_sample.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.example.lz.android_greendao_sample.dao.CustomerEntityDao;
import com.example.lz.android_greendao_sample.dao.OrderEntityDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ORDER_ENTITY".
 */
@Entity(active = true)
public class OrderEntity {

    @Id
    private Long orderID;
    private Float amount;
    private Long customerID;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient OrderEntityDao myDao;

    @ToOne(joinProperty = "customerID")
    private CustomerEntity customerEntity;

    @Generated
    private transient Long customerEntity__resolvedKey;

    @Generated
    public OrderEntity() {
    }

    public OrderEntity(Long orderID) {
        this.orderID = orderID;
    }

    @Generated
    public OrderEntity(Long orderID, Float amount, Long customerID) {
        this.orderID = orderID;
        this.amount = amount;
        this.customerID = customerID;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderEntityDao() : null;
    }

    public Long getOrderID() {
        return orderID;
    }

    public void setOrderID(Long orderID) {
        this.orderID = orderID;
    }

    public Float getAmount() {
        return amount;
    }

    public void setAmount(Float amount) {
        this.amount = amount;
    }

    public Long getCustomerID() {
        return customerID;
    }

    public void setCustomerID(Long customerID) {
        this.customerID = customerID;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public CustomerEntity getCustomerEntity() {
        Long __key = this.customerID;
        if (customerEntity__resolvedKey == null || !customerEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomerEntityDao targetDao = daoSession.getCustomerEntityDao();
            CustomerEntity customerEntityNew = targetDao.load(__key);
            synchronized (this) {
                customerEntity = customerEntityNew;
            	customerEntity__resolvedKey = __key;
            }
        }
        return customerEntity;
    }

    @Generated
    public void setCustomerEntity(CustomerEntity customerEntity) {
        synchronized (this) {
            this.customerEntity = customerEntity;
            customerID = customerEntity == null ? null : customerEntity.getCustomerID();
            customerEntity__resolvedKey = customerID;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
