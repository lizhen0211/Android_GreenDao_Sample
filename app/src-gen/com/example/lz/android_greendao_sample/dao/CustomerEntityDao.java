package com.example.lz.android_greendao_sample.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lz.android_greendao_sample.CustomerEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOMER_ENTITY".
*/
public class CustomerEntityDao extends AbstractDao<CustomerEntity, Long> {

    public static final String TABLENAME = "CUSTOMER_ENTITY";

    /**
     * Properties of entity CustomerEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CustomerID = new Property(0, Long.class, "customerID", true, "CUSTOMER_ID");
        public final static Property CustomerName = new Property(1, String.class, "customerName", false, "CUSTOMER_NAME");
    };

    private DaoSession daoSession;


    public CustomerEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMER_ENTITY\" (" + //
                "\"CUSTOMER_ID\" INTEGER PRIMARY KEY ," + // 0: customerID
                "\"CUSTOMER_NAME\" TEXT);"); // 1: customerName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CustomerEntity entity) {
        stmt.clearBindings();
 
        Long customerID = entity.getCustomerID();
        if (customerID != null) {
            stmt.bindLong(1, customerID);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(2, customerName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CustomerEntity entity) {
        stmt.clearBindings();
 
        Long customerID = entity.getCustomerID();
        if (customerID != null) {
            stmt.bindLong(1, customerID);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(2, customerName);
        }
    }

    @Override
    protected final void attachEntity(CustomerEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CustomerEntity readEntity(Cursor cursor, int offset) {
        CustomerEntity entity = new CustomerEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // customerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // customerName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CustomerEntity entity, int offset) {
        entity.setCustomerID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCustomerName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CustomerEntity entity, long rowId) {
        entity.setCustomerID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CustomerEntity entity) {
        if(entity != null) {
            return entity.getCustomerID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
