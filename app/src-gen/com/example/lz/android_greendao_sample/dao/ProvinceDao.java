package com.example.lz.android_greendao_sample.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lz.android_greendao_sample.Province;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROVINCE".
*/
public class ProvinceDao extends AbstractDao<Province, Long> {

    public static final String TABLENAME = "PROVINCE";

    /**
     * Properties of entity Province.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Alias = new Property(2, String.class, "alias", false, "ALIAS");
        public final static Property CityQuantity = new Property(3, Integer.class, "cityQuantity", false, "CITY_QUANTITY");
        public final static Property PopulationQuantity = new Property(4, Long.class, "populationQuantity", false, "POPULATION_QUANTITY");
        public final static Property Ranking = new Property(5, Integer.class, "Ranking", false, "RANKING");
    };


    public ProvinceDao(DaoConfig config) {
        super(config);
    }
    
    public ProvinceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROVINCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ALIAS\" TEXT," + // 2: alias
                "\"CITY_QUANTITY\" INTEGER," + // 3: cityQuantity
                "\"POPULATION_QUANTITY\" INTEGER," + // 4: populationQuantity
                "\"RANKING\" INTEGER);"); // 5: Ranking
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROVINCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Province entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(3, alias);
        }
 
        Integer cityQuantity = entity.getCityQuantity();
        if (cityQuantity != null) {
            stmt.bindLong(4, cityQuantity);
        }
 
        Long populationQuantity = entity.getPopulationQuantity();
        if (populationQuantity != null) {
            stmt.bindLong(5, populationQuantity);
        }
 
        Integer Ranking = entity.getRanking();
        if (Ranking != null) {
            stmt.bindLong(6, Ranking);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Province entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(3, alias);
        }
 
        Integer cityQuantity = entity.getCityQuantity();
        if (cityQuantity != null) {
            stmt.bindLong(4, cityQuantity);
        }
 
        Long populationQuantity = entity.getPopulationQuantity();
        if (populationQuantity != null) {
            stmt.bindLong(5, populationQuantity);
        }
 
        Integer Ranking = entity.getRanking();
        if (Ranking != null) {
            stmt.bindLong(6, Ranking);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Province readEntity(Cursor cursor, int offset) {
        Province entity = new Province( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alias
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // cityQuantity
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // populationQuantity
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // Ranking
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Province entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlias(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCityQuantity(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPopulationQuantity(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setRanking(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Province entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Province entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
