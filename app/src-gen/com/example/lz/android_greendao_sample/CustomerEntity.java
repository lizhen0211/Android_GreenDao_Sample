package com.example.lz.android_greendao_sample;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.example.lz.android_greendao_sample.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.example.lz.android_greendao_sample.dao.CustomerEntityDao;
import com.example.lz.android_greendao_sample.dao.OrderEntityDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CUSTOMER_ENTITY".
 */
@Entity(active = true)
public class CustomerEntity {

    @Id
    private Long customerID;
    private String customerName;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CustomerEntityDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "customerID", referencedName = "customerID")
    })
    private List<OrderEntity> orders;

    @Generated
    public CustomerEntity() {
    }

    public CustomerEntity(Long customerID) {
        this.customerID = customerID;
    }

    @Generated
    public CustomerEntity(Long customerID, String customerName) {
        this.customerID = customerID;
        this.customerName = customerName;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCustomerEntityDao() : null;
    }

    public Long getCustomerID() {
        return customerID;
    }

    public void setCustomerID(Long customerID) {
        this.customerID = customerID;
    }

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<OrderEntity> getOrders() {
        if (orders == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrderEntityDao targetDao = daoSession.getOrderEntityDao();
            List<OrderEntity> ordersNew = targetDao._queryCustomerEntity_Orders(customerID);
            synchronized (this) {
                if(orders == null) {
                    orders = ordersNew;
                }
            }
        }
        return orders;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetOrders() {
        orders = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
